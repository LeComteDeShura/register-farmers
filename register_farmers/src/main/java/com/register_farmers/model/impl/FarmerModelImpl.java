package com.register_farmers.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.register_farmers.model.Farmer;
import com.register_farmers.model.FarmerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Farmer service. Represents a row in the &quot;farmer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.register_farmers.model.FarmerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerImpl
 * @see com.register_farmers.model.Farmer
 * @see com.register_farmers.model.FarmerModel
 * @generated
 */
public class FarmerModelImpl extends BaseModelImpl<Farmer>
    implements FarmerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a farmer model instance should use the {@link com.register_farmers.model.Farmer} interface instead.
     */
    public static final String TABLE_NAME = "farmer";
    public static final Object[][] TABLE_COLUMNS = {
            { "idFarmer", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "isArchived", Types.BOOLEAN },
            { "idDistrictReg", Types.BIGINT },
            { "inn", Types.VARCHAR },
            { "ogrn", Types.VARCHAR },
            { "kpp", Types.VARCHAR },
            { "opf", Types.VARCHAR },
            { "date_", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table farmer (idFarmer LONG not null primary key,name VARCHAR(75) null,isArchived BOOLEAN,idDistrictReg LONG,inn VARCHAR(75) null,ogrn VARCHAR(75) null,kpp VARCHAR(75) null,opf VARCHAR(75) null,date_ DATE null)";
    public static final String TABLE_SQL_DROP = "drop table farmer";
    public static final String ORDER_BY_JPQL = " ORDER BY farmer.idFarmer ASC";
    public static final String ORDER_BY_SQL = " ORDER BY farmer.idFarmer ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.register_farmers.model.Farmer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.register_farmers.model.Farmer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.register_farmers.model.Farmer"),
            true);
    public static long INN_COLUMN_BITMASK = 1L;
    public static long ISARCHIVED_COLUMN_BITMASK = 2L;
    public static long NAME_COLUMN_BITMASK = 4L;
    public static long IDFARMER_COLUMN_BITMASK = 8L;
    public static final String MAPPING_TABLE_AAA_FARMERS_DISTRICTS_NAME = "aaa_Farmers_Districts";
    public static final Object[][] MAPPING_TABLE_AAA_FARMERS_DISTRICTS_COLUMNS = {
            { "idDistrict", Types.BIGINT },
            { "idFarmer", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_AAA_FARMERS_DISTRICTS_SQL_CREATE = "create table aaa_Farmers_Districts (idDistrict LONG not null,idFarmer LONG not null,primary key (idDistrict, idFarmer))";
    public static final boolean FINDER_CACHE_ENABLED_AAA_FARMERS_DISTRICTS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.aaa_Farmers_Districts"), true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.register_farmers.model.Farmer"));
    private static ClassLoader _classLoader = Farmer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Farmer.class };
    private long _idFarmer;
    private String _name;
    private String _originalName;
    private boolean _isArchived;
    private boolean _originalIsArchived;
    private boolean _setOriginalIsArchived;
    private long _idDistrictReg;
    private String _inn;
    private String _originalInn;
    private String _ogrn;
    private String _kpp;
    private String _opf;
    private Date _date;
    private long _columnBitmask;
    private Farmer _escapedModel;

    public FarmerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _idFarmer;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdFarmer(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idFarmer;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Farmer.class;
    }

    @Override
    public String getModelClassName() {
        return Farmer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idFarmer", getIdFarmer());
        attributes.put("name", getName());
        attributes.put("isArchived", getIsArchived());
        attributes.put("idDistrictReg", getIdDistrictReg());
        attributes.put("inn", getInn());
        attributes.put("ogrn", getOgrn());
        attributes.put("kpp", getKpp());
        attributes.put("opf", getOpf());
        attributes.put("date", getDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idFarmer = (Long) attributes.get("idFarmer");

        if (idFarmer != null) {
            setIdFarmer(idFarmer);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Boolean isArchived = (Boolean) attributes.get("isArchived");

        if (isArchived != null) {
            setIsArchived(isArchived);
        }

        Long idDistrictReg = (Long) attributes.get("idDistrictReg");

        if (idDistrictReg != null) {
            setIdDistrictReg(idDistrictReg);
        }

        String inn = (String) attributes.get("inn");

        if (inn != null) {
            setInn(inn);
        }

        String ogrn = (String) attributes.get("ogrn");

        if (ogrn != null) {
            setOgrn(ogrn);
        }

        String kpp = (String) attributes.get("kpp");

        if (kpp != null) {
            setKpp(kpp);
        }

        String opf = (String) attributes.get("opf");

        if (opf != null) {
            setOpf(opf);
        }

        Date date = (Date) attributes.get("date");

        if (date != null) {
            setDate(date);
        }
    }

    @Override
    public long getIdFarmer() {
        return _idFarmer;
    }

    @Override
    public void setIdFarmer(long idFarmer) {
        _idFarmer = idFarmer;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @Override
    public boolean getIsArchived() {
        return _isArchived;
    }

    @Override
    public boolean isIsArchived() {
        return _isArchived;
    }

    @Override
    public void setIsArchived(boolean isArchived) {
        _columnBitmask |= ISARCHIVED_COLUMN_BITMASK;

        if (!_setOriginalIsArchived) {
            _setOriginalIsArchived = true;

            _originalIsArchived = _isArchived;
        }

        _isArchived = isArchived;
    }

    public boolean getOriginalIsArchived() {
        return _originalIsArchived;
    }

    @Override
    public long getIdDistrictReg() {
        return _idDistrictReg;
    }

    @Override
    public void setIdDistrictReg(long idDistrictReg) {
        _idDistrictReg = idDistrictReg;
    }

    @Override
    public String getInn() {
        if (_inn == null) {
            return StringPool.BLANK;
        } else {
            return _inn;
        }
    }

    @Override
    public void setInn(String inn) {
        _columnBitmask |= INN_COLUMN_BITMASK;

        if (_originalInn == null) {
            _originalInn = _inn;
        }

        _inn = inn;
    }

    public String getOriginalInn() {
        return GetterUtil.getString(_originalInn);
    }

    @Override
    public String getOgrn() {
        if (_ogrn == null) {
            return StringPool.BLANK;
        } else {
            return _ogrn;
        }
    }

    @Override
    public void setOgrn(String ogrn) {
        _ogrn = ogrn;
    }

    @Override
    public String getKpp() {
        if (_kpp == null) {
            return StringPool.BLANK;
        } else {
            return _kpp;
        }
    }

    @Override
    public void setKpp(String kpp) {
        _kpp = kpp;
    }

    @Override
    public String getOpf() {
        if (_opf == null) {
            return StringPool.BLANK;
        } else {
            return _opf;
        }
    }

    @Override
    public void setOpf(String opf) {
        _opf = opf;
    }

    @Override
    public Date getDate() {
        return _date;
    }

    @Override
    public void setDate(Date date) {
        _date = date;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Farmer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Farmer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Farmer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FarmerImpl farmerImpl = new FarmerImpl();

        farmerImpl.setIdFarmer(getIdFarmer());
        farmerImpl.setName(getName());
        farmerImpl.setIsArchived(getIsArchived());
        farmerImpl.setIdDistrictReg(getIdDistrictReg());
        farmerImpl.setInn(getInn());
        farmerImpl.setOgrn(getOgrn());
        farmerImpl.setKpp(getKpp());
        farmerImpl.setOpf(getOpf());
        farmerImpl.setDate(getDate());

        farmerImpl.resetOriginalValues();

        return farmerImpl;
    }

    @Override
    public int compareTo(Farmer farmer) {
        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Farmer)) {
            return false;
        }

        Farmer farmer = (Farmer) obj;

        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FarmerModelImpl farmerModelImpl = this;

        farmerModelImpl._originalName = farmerModelImpl._name;

        farmerModelImpl._originalIsArchived = farmerModelImpl._isArchived;

        farmerModelImpl._setOriginalIsArchived = false;

        farmerModelImpl._originalInn = farmerModelImpl._inn;

        farmerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Farmer> toCacheModel() {
        FarmerCacheModel farmerCacheModel = new FarmerCacheModel();

        farmerCacheModel.idFarmer = getIdFarmer();

        farmerCacheModel.name = getName();

        String name = farmerCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            farmerCacheModel.name = null;
        }

        farmerCacheModel.isArchived = getIsArchived();

        farmerCacheModel.idDistrictReg = getIdDistrictReg();

        farmerCacheModel.inn = getInn();

        String inn = farmerCacheModel.inn;

        if ((inn != null) && (inn.length() == 0)) {
            farmerCacheModel.inn = null;
        }

        farmerCacheModel.ogrn = getOgrn();

        String ogrn = farmerCacheModel.ogrn;

        if ((ogrn != null) && (ogrn.length() == 0)) {
            farmerCacheModel.ogrn = null;
        }

        farmerCacheModel.kpp = getKpp();

        String kpp = farmerCacheModel.kpp;

        if ((kpp != null) && (kpp.length() == 0)) {
            farmerCacheModel.kpp = null;
        }

        farmerCacheModel.opf = getOpf();

        String opf = farmerCacheModel.opf;

        if ((opf != null) && (opf.length() == 0)) {
            farmerCacheModel.opf = null;
        }

        Date date = getDate();

        if (date != null) {
            farmerCacheModel.date = date.getTime();
        } else {
            farmerCacheModel.date = Long.MIN_VALUE;
        }

        return farmerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{idFarmer=");
        sb.append(getIdFarmer());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", isArchived=");
        sb.append(getIsArchived());
        sb.append(", idDistrictReg=");
        sb.append(getIdDistrictReg());
        sb.append(", inn=");
        sb.append(getInn());
        sb.append(", ogrn=");
        sb.append(getOgrn());
        sb.append(", kpp=");
        sb.append(getKpp());
        sb.append(", opf=");
        sb.append(getOpf());
        sb.append(", date=");
        sb.append(getDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.register_farmers.model.Farmer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idFarmer</column-name><column-value><![CDATA[");
        sb.append(getIdFarmer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isArchived</column-name><column-value><![CDATA[");
        sb.append(getIsArchived());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idDistrictReg</column-name><column-value><![CDATA[");
        sb.append(getIdDistrictReg());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inn</column-name><column-value><![CDATA[");
        sb.append(getInn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ogrn</column-name><column-value><![CDATA[");
        sb.append(getOgrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kpp</column-name><column-value><![CDATA[");
        sb.append(getKpp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>opf</column-name><column-value><![CDATA[");
        sb.append(getOpf());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date</column-name><column-value><![CDATA[");
        sb.append(getDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
